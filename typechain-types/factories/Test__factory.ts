/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { Test, TestInterface } from "../Test";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "signer",
        type: "address",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "userId",
                type: "uint256",
              },
              {
                internalType: "address",
                name: "wallet",
                type: "address",
              },
            ],
            internalType: "struct Verifier.Identity",
            name: "bidder",
            type: "tuple",
          },
        ],
        internalType: "struct Verifier.Bid",
        name: "bid",
        type: "tuple",
      },
      {
        internalType: "uint8",
        name: "v",
        type: "uint8",
      },
      {
        internalType: "bytes32",
        name: "r",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "s",
        type: "bytes32",
      },
    ],
    name: "verify",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610995806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80633c9ee31c14610030575b600080fd5b61004a6004803603810190610045919061040a565b610060565b6040516100579190610589565b60405180910390f35b600061006f868686868661007a565b905095945050505050565b600060016100878661010c565b858585604051600081526020016040526040516100a79493929190610673565b6020604051602081039080840390855afa1580156100c9573d6000803e3d6000fd5b5050506020604051035173ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1614905095945050505050565b60006040518060800160405280605f81526020016108da605f9139604051602001610137919061053b565b604051602081830303815290604052805190602001207f9c22ff5f21f0b81b113e63f7db6da94fedef11b2119b4088b89664fb9a3cb6587fad7c5bef027816a800da1736444fb58a807ef4c9603b7848673f7e3a68eb14a56005731c56346cd2a2bf3202f771f50d3d14a367b480707ff2d857f4a3edcb9b78b4d503bfe733db1e3f6cdc2b7971ee739626c97e86a55860001b6040516020016101df969594939291906105a4565b604051602081830303815290604052805190602001206040518060800160405280604a8152602001610890604a913960405160200161021e919061053b565b604051602081830303815290604052805190602001208360000151610246856020015161029c565b6040516020016102589392919061063c565b6040516020818303038152906040528051906020012060405160200161027f929190610552565b604051602081830303815290604052805190602001209050919050565b6000604051806060016040528060278152602001610939602791396040516020016102c7919061053b565b60405160208183030381529060405280519060200120826000015183602001516040516020016102f993929190610605565b604051602081830303815290604052805190602001209050919050565b60008135905061032581610833565b92915050565b60008135905061033a8161084a565b92915050565b600060608284031215610356576103556107ef565b5b61036060406106b8565b90506000610370848285016103e0565b600083015250602061038484828501610390565b60208301525092915050565b6000604082840312156103a6576103a56107ef565b5b6103b060406106b8565b905060006103c0848285016103e0565b60008301525060206103d484828501610316565b60208301525092915050565b6000813590506103ef81610861565b92915050565b60008135905061040481610878565b92915050565b600080600080600060e08688031215610426576104256107f4565b5b600061043488828901610316565b955050602061044588828901610340565b9450506080610456888289016103f5565b93505060a06104678882890161032b565b92505060c06104788882890161032b565b9150509295509295909350565b61048e816106f3565b82525050565b61049d81610705565b82525050565b6104ac81610711565b82525050565b6104c36104be82610711565b6107b6565b82525050565b60006104d4826106dd565b6104de81856106e8565b93506104ee818560208601610752565b80840191505092915050565b60006105076002836106e8565b91506105128261080a565b600282019050919050565b6105268161073b565b82525050565b61053581610745565b82525050565b600061054782846104c9565b915081905092915050565b600061055d826104fa565b915061056982856104b2565b60208201915061057982846104b2565b6020820191508190509392505050565b600060208201905061059e6000830184610494565b92915050565b600060c0820190506105b960008301896104a3565b6105c660208301886104a3565b6105d360408301876104a3565b6105e0606083018661051d565b6105ed6080830185610485565b6105fa60a08301846104a3565b979650505050505050565b600060608201905061061a60008301866104a3565b610627602083018561051d565b6106346040830184610485565b949350505050565b600060608201905061065160008301866104a3565b61065e602083018561051d565b61066b60408301846104a3565b949350505050565b600060808201905061068860008301876104a3565b610695602083018661052c565b6106a260408301856104a3565b6106af60608301846104a3565b95945050505050565b60006106c26106d3565b90506106ce8282610785565b919050565b6000604051905090565b600081519050919050565b600081905092915050565b60006106fe8261071b565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60005b83811015610770578082015181840152602081019050610755565b8381111561077f576000848401525b50505050565b61078e826107f9565b810181811067ffffffffffffffff821117156107ad576107ac6107c0565b5b80604052505050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f1901000000000000000000000000000000000000000000000000000000000000600082015250565b61083c816106f3565b811461084757600080fd5b50565b61085381610711565b811461085e57600080fd5b50565b61086a8161073b565b811461087557600080fd5b50565b61088181610745565b811461088c57600080fd5b5056fe4269642875696e7432353620616d6f756e742c4964656e7469747920626964646572294964656e746974792875696e74323536207573657249642c616464726573732077616c6c657429454950373132446f6d61696e28737472696e67206e616d652c737472696e672076657273696f6e2c75696e7432353620636861696e49642c6164647265737320766572696679696e67436f6e74726163742c627974657333322073616c74294964656e746974792875696e74323536207573657249642c616464726573732077616c6c657429a26469706673582212201b5971f7a08e5ad7e3f22fd922aa8b6d266a5d851d69ffea662eff6e3cbfd41164736f6c63430008070033";

type TestConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Test__factory extends ContractFactory {
  constructor(...args: TestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Test> {
    return super.deploy(overrides || {}) as Promise<Test>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Test {
    return super.attach(address) as Test;
  }
  override connect(signer: Signer): Test__factory {
    return super.connect(signer) as Test__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestInterface {
    return new utils.Interface(_abi) as TestInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Test {
    return new Contract(address, _abi, signerOrProvider) as Test;
  }
}
