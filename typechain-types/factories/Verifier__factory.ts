/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { Verifier, VerifierInterface } from "../Verifier";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "signer",
        type: "address",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "userId",
                type: "uint256",
              },
              {
                internalType: "address",
                name: "wallet",
                type: "address",
              },
            ],
            internalType: "struct Verifier.Identity",
            name: "bidder",
            type: "tuple",
          },
        ],
        internalType: "struct Verifier.Bid",
        name: "bid",
        type: "tuple",
      },
      {
        internalType: "uint8",
        name: "v",
        type: "uint8",
      },
      {
        internalType: "bytes32",
        name: "r",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "s",
        type: "bytes32",
      },
    ],
    name: "verify",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061097b806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80633c9ee31c14610030575b600080fd5b61004a600480360381019061004591906103f0565b610060565b604051610057919061056f565b60405180910390f35b6000600161006d866100f2565b8585856040516000815260200160405260405161008d9493929190610659565b6020604051602081039080840390855afa1580156100af573d6000803e3d6000fd5b5050506020604051035173ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1614905095945050505050565b60006040518060800160405280605f81526020016108c0605f913960405160200161011d9190610521565b604051602081830303815290604052805190602001207f9c22ff5f21f0b81b113e63f7db6da94fedef11b2119b4088b89664fb9a3cb6587fad7c5bef027816a800da1736444fb58a807ef4c9603b7848673f7e3a68eb14a56005731c56346cd2a2bf3202f771f50d3d14a367b480707ff2d857f4a3edcb9b78b4d503bfe733db1e3f6cdc2b7971ee739626c97e86a55860001b6040516020016101c59695949392919061058a565b604051602081830303815290604052805190602001206040518060800160405280604a8152602001610876604a91396040516020016102049190610521565b60405160208183030381529060405280519060200120836000015161022c8560200151610282565b60405160200161023e93929190610622565b60405160208183030381529060405280519060200120604051602001610265929190610538565b604051602081830303815290604052805190602001209050919050565b600060405180606001604052806027815260200161091f602791396040516020016102ad9190610521565b60405160208183030381529060405280519060200120826000015183602001516040516020016102df939291906105eb565b604051602081830303815290604052805190602001209050919050565b60008135905061030b81610819565b92915050565b60008135905061032081610830565b92915050565b60006060828403121561033c5761033b6107d5565b5b610346604061069e565b90506000610356848285016103c6565b600083015250602061036a84828501610376565b60208301525092915050565b60006040828403121561038c5761038b6107d5565b5b610396604061069e565b905060006103a6848285016103c6565b60008301525060206103ba848285016102fc565b60208301525092915050565b6000813590506103d581610847565b92915050565b6000813590506103ea8161085e565b92915050565b600080600080600060e0868803121561040c5761040b6107da565b5b600061041a888289016102fc565b955050602061042b88828901610326565b945050608061043c888289016103db565b93505060a061044d88828901610311565b92505060c061045e88828901610311565b9150509295509295909350565b610474816106d9565b82525050565b610483816106eb565b82525050565b610492816106f7565b82525050565b6104a96104a4826106f7565b61079c565b82525050565b60006104ba826106c3565b6104c481856106ce565b93506104d4818560208601610738565b80840191505092915050565b60006104ed6002836106ce565b91506104f8826107f0565b600282019050919050565b61050c81610721565b82525050565b61051b8161072b565b82525050565b600061052d82846104af565b915081905092915050565b6000610543826104e0565b915061054f8285610498565b60208201915061055f8284610498565b6020820191508190509392505050565b6000602082019050610584600083018461047a565b92915050565b600060c08201905061059f6000830189610489565b6105ac6020830188610489565b6105b96040830187610489565b6105c66060830186610503565b6105d3608083018561046b565b6105e060a0830184610489565b979650505050505050565b60006060820190506106006000830186610489565b61060d6020830185610503565b61061a604083018461046b565b949350505050565b60006060820190506106376000830186610489565b6106446020830185610503565b6106516040830184610489565b949350505050565b600060808201905061066e6000830187610489565b61067b6020830186610512565b6106886040830185610489565b6106956060830184610489565b95945050505050565b60006106a86106b9565b90506106b4828261076b565b919050565b6000604051905090565b600081519050919050565b600081905092915050565b60006106e482610701565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60005b8381101561075657808201518184015260208101905061073b565b83811115610765576000848401525b50505050565b610774826107df565b810181811067ffffffffffffffff82111715610793576107926107a6565b5b80604052505050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f1901000000000000000000000000000000000000000000000000000000000000600082015250565b610822816106d9565b811461082d57600080fd5b50565b610839816106f7565b811461084457600080fd5b50565b61085081610721565b811461085b57600080fd5b50565b6108678161072b565b811461087257600080fd5b5056fe4269642875696e7432353620616d6f756e742c4964656e7469747920626964646572294964656e746974792875696e74323536207573657249642c616464726573732077616c6c657429454950373132446f6d61696e28737472696e67206e616d652c737472696e672076657273696f6e2c75696e7432353620636861696e49642c6164647265737320766572696679696e67436f6e74726163742c627974657333322073616c74294964656e746974792875696e74323536207573657249642c616464726573732077616c6c657429a26469706673582212200b8004c2a5b27780f3fd96d92ff4d557bc23a2cb6308da3ce9f3cf482d9981cf64736f6c63430008070033";

type VerifierConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: VerifierConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Verifier__factory extends ContractFactory {
  constructor(...args: VerifierConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Verifier> {
    return super.deploy(overrides || {}) as Promise<Verifier>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Verifier {
    return super.attach(address) as Verifier;
  }
  override connect(signer: Signer): Verifier__factory {
    return super.connect(signer) as Verifier__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): VerifierInterface {
    return new utils.Interface(_abi) as VerifierInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Verifier {
    return new Contract(address, _abi, signerOrProvider) as Verifier;
  }
}
